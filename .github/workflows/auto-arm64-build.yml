name: Auto ARM64 Build

on:
  push:
    branches: [ master, develop ]
  workflow_dispatch:

permissions:
  actions: write
  contents: read

env:
  ALIYUN_REGION: cn-hangzhou
  ARM64_ZONES: cn-hangzhou-j,cn-hangzhou-k,cn-hangzhou-b,cn-hangzhou-g,cn-hangzhou-h,cn-hangzhou-i
  RUNNER_NAME: openresty-arm64-spot

jobs:
  find-cheapest:
    runs-on: ubuntu-latest
    outputs:
      cheapest_instance: ${{ steps.find_cheapest.outputs.cheapest_instance }}
      cheapest_zone: ${{ steps.find_cheapest.outputs.cheapest_zone }}
      spot_price_limit: ${{ steps.find_cheapest.outputs.spot_price_limit }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure Aliyun CLI
        run: |
          chmod +x .github/scripts/configure-aliyun-cli.sh
          .github/scripts/configure-aliyun-cli.sh \
            "${{ env.ALIYUN_REGION }}" \
            "${{ secrets.ALIYUN_ACCESS_KEY_ID }}" \
            "${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}"

      - name: Find Cheapest Instance
        id: find_cheapest
        env:
          ALIYUN_ACCESS_KEY_ID: ${{ secrets.ALIYUN_ACCESS_KEY_ID }}
          ALIYUN_ACCESS_KEY_SECRET: ${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}
        run: |
          python3 .github/scripts/find-cheapest-instance.py \
            "${{ env.ALIYUN_REGION }}" \
            "ecs.c8y,ecs.c8r" \
            "8" "8" "16" "16"

  create-spot-runner:
    needs: find-cheapest
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
    outputs:
      instance_id: ${{ steps.create_instance.outputs.instance_id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure Aliyun CLI
        run: |
          chmod +x .github/scripts/configure-aliyun-cli.sh
          .github/scripts/configure-aliyun-cli.sh \
            "${{ env.ALIYUN_REGION }}" \
            "${{ secrets.ALIYUN_ACCESS_KEY_ID }}" \
            "${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}"

      - name: Get Runner Registration Token
        id: get_token
        run: |
          chmod +x .github/scripts/get-runner-registration-token.py
          echo "Fetching registration token..."
          # Use PAT if available (for cases where GITHUB_TOKEN lacks permissions)
          # Note: Secret names cannot start with GITHUB_
          TOKEN_TO_USE="${{ secrets.RUNNER_REGISTRATION_PAT || secrets.GITHUB_TOKEN }}"
          if [ -n "${{ secrets.RUNNER_REGISTRATION_PAT }}" ]; then
            echo "Using Personal Access Token from secrets"
          else
            echo "Using GITHUB_TOKEN"
          fi
          # Run script - stderr will show logs, stdout will have token if successful
          set +e
          REGISTRATION_TOKEN=$(python3 .github/scripts/get-runner-registration-token.py \
            "$TOKEN_TO_USE" \
            "dianplus" \
            "openresty" 2>&1)
          EXIT_CODE=$?
          set -e
          
          if [ $EXIT_CODE -ne 0 ]; then
            echo "❌ Failed to get registration token (exit code: $EXIT_CODE)"
            echo "Output:"
            echo "$REGISTRATION_TOKEN"
            exit 1
          fi
          
          # Extract token (should be the last line if script succeeded)
          TOKEN=$(echo "$REGISTRATION_TOKEN" | tail -1)
          
          if [ -z "$TOKEN" ] || [ "$TOKEN" = "" ]; then
            echo "❌ Registration token is empty"
            echo "Full output:"
            echo "$REGISTRATION_TOKEN"
            exit 1
          fi
          
          echo "registration_token=$TOKEN" >> $GITHUB_OUTPUT
          echo "✓ Registration token obtained (hidden for security)"

      - name: Create Spot Instance
        id: create_instance
        env:
          ALIYUN_VSWITCH_ID_B: ${{ secrets.ALIYUN_VSWITCH_ID_B }}
          ALIYUN_VSWITCH_ID_G: ${{ secrets.ALIYUN_VSWITCH_ID_G }}
          ALIYUN_VSWITCH_ID_H: ${{ secrets.ALIYUN_VSWITCH_ID_H }}
          ALIYUN_VSWITCH_ID_I: ${{ secrets.ALIYUN_VSWITCH_ID_I }}
          ALIYUN_VSWITCH_ID_J: ${{ secrets.ALIYUN_VSWITCH_ID_J }}
          ALIYUN_VSWITCH_ID_K: ${{ secrets.ALIYUN_VSWITCH_ID_K }}
          ALIYUN_VSWITCH_ID: ${{ secrets.ALIYUN_VSWITCH_ID }}
        run: |
          python3 .github/scripts/create-spot-instance.py \
            "${{ needs.find-cheapest.outputs.cheapest_instance }}" \
            "${{ needs.find-cheapest.outputs.cheapest_zone }}" \
            "${{ needs.find-cheapest.outputs.spot_price_limit }}" \
            "${{ secrets.ALIYUN_ARM64_IMAGE_ID }}" \
            "${{ secrets.ALIYUN_SECURITY_GROUP_ID }}" \
            "${{ secrets.ALIYUN_VSWITCH_ID }}" \
            "${{ secrets.ALIYUN_KEY_PAIR_NAME }}" \
            "${{ steps.get_token.outputs.registration_token }}" \
            "${{ env.RUNNER_NAME }}" \
            "arm64"

      - name: Wait for Instance Ready
        run: |
          python3 .github/scripts/wait-instance-ready.py \
            "${{ steps.create_instance.outputs.instance_id }}" \
            "600"

      - name: Check Runner Status
        if: steps.create_instance.outputs.instance_id != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 .github/scripts/check-runner-status.py \
            "${{ steps.create_instance.outputs.instance_id }}"

  build-arm64:
    needs: create-spot-runner
    runs-on: [self-hosted, linux, ARM64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Docker Image
        run: |
          docker build -t openresty:latest .
          docker tag openresty:latest openresty:arm64-$(date +%Y%m%d-%H%M%S)

      - name: Configure Aliyun CLI for Cleanup
        if: needs.create-spot-runner.outputs.instance_id != ''
        run: |
          chmod +x .github/scripts/configure-aliyun-cli.sh
          .github/scripts/configure-aliyun-cli.sh \
            "${{ env.ALIYUN_REGION }}" \
            "${{ secrets.ALIYUN_ACCESS_KEY_ID }}" \
            "${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}"

      - name: Cleanup Spot Instance
        if: needs.create-spot-runner.outputs.instance_id != ''
        run: |
          python3 .github/scripts/cleanup-instance.py \
            "${{ needs.create-spot-runner.outputs.instance_id }}" \
            "true"
