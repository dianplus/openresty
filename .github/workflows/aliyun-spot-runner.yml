name: Aliyun Spot Runner Manager (Multi-Arch)

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Action to perform"
        required: true
        default: "create"
        type: choice
        options:
          - create
          - destroy
          - list
      architecture:
        description: "Target architecture"
        required: true
        default: "arm64"
        type: choice
        options:
          - arm64
          - amd64
      instance_type:
        description: "ECS instance type"
        required: false
        default: "ecs.c8y.2xlarge"
      image_id:
        description: "ECS image ID"
        required: false
        default: "" # Will be dynamically determined based on architecture
      runner_name:
        description: "Runner name prefix"
        required: false
        default: "openresty-spot"

env:
  ALIYUN_REGION: cn-hangzhou
  # Select availability zones based on architecture (confirmed by official documentation and actual testing)
  AMD64_ZONES: cn-hangzhou-j,cn-hangzhou-k,cn-hangzhou-b,cn-hangzhou-g,cn-hangzhou-h,cn-hangzhou-i
  ARM64_ZONES: cn-hangzhou-j,cn-hangzhou-k,cn-hangzhou-b

jobs:
  manage-runner:
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure Aliyun CLI
        run: |
          # Install Aliyun CLI
          wget https://aliyuncli.alicdn.com/aliyun-cli-linux-latest-amd64.tgz
          tar -xzf aliyun-cli-linux-latest-amd64.tgz
          sudo mv aliyun /usr/local/bin/

          # Configure authentication
          aliyun configure set \
            --profile default \
            --mode AK \
            --region ${{ env.ALIYUN_REGION }} \
            --access-key-id ${{ secrets.ALIYUN_ACCESS_KEY_ID }} \
            --access-key-secret ${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}

      - name: Create Spot Instance
        if: github.event.inputs.action == 'create'
        run: |
          # Select default values based on architecture
          if [ "${{ github.event.inputs.architecture }}" = "arm64" ]; then
            INSTANCE_TYPE="${{ github.event.inputs.instance_type || 'ecs.g8y.large' }}"
            IMAGE_ID="${{ github.event.inputs.image_id || secrets.ALIYUN_ARM64_IMAGE_ID }}"
            RUNNER_ARCH="arm64"
          else
            INSTANCE_TYPE="${{ github.event.inputs.instance_type || 'ecs.c6.large' }}"
            IMAGE_ID="${{ github.event.inputs.image_id || secrets.ALIYUN_AMD64_IMAGE_ID }}"
            RUNNER_ARCH="x64"
          fi

          # Generate random instance name
          INSTANCE_NAME="${{ github.event.inputs.runner_name }}-${{ github.event.inputs.architecture }}-$(date +%s)"

          # Create user data script
          cat > user_data.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # Configure proxy from GitHub environment variables
          if [ -n "$HTTP_PROXY" ]; then
            echo "Setting HTTP_PROXY: $HTTP_PROXY"
            export HTTP_PROXY="$HTTP_PROXY"
            echo "export HTTP_PROXY=\"$HTTP_PROXY\"" >> /etc/environment
          fi
          
          if [ -n "$HTTPS_PROXY" ]; then
            echo "Setting HTTPS_PROXY: $HTTPS_PROXY"
            export HTTPS_PROXY="$HTTPS_PROXY"
            echo "export HTTPS_PROXY=\"$HTTPS_PROXY\"" >> /etc/environment
          fi
          
          # Set NO_PROXY with default values if not provided
          if [ -n "$NO_PROXY" ]; then
            echo "Setting NO_PROXY: $NO_PROXY"
            export NO_PROXY="$NO_PROXY"
            echo "export NO_PROXY=\"$NO_PROXY\"" >> /etc/environment
          else
            NO_PROXY_DEFAULT="localhost,127.0.0.1,::1,192.168.0.0/16,10.0.0.0/8,172.16.0.0/12,mirrors.tuna.tsinghua.edu.cn,mirrors.aliyun.com,.aliyun.com,.aliyuncs.com,.alicdn.com,.dianplus.cn,.dianjia.io,.taobao.com"
            echo "Setting NO_PROXY default: $NO_PROXY_DEFAULT"
            export NO_PROXY="$NO_PROXY_DEFAULT"
            echo "export NO_PROXY=\"$NO_PROXY_DEFAULT\"" >> /etc/environment
          fi
          
          # Install necessary software
          yum update -y
          yum install -y docker git curl wget
          systemctl start docker
          systemctl enable docker

          # Download and configure GitHub Actions Runner
          cd /root
          echo \"Configuring runner with proxy settings...\"
          echo \"HTTP_PROXY: \$HTTP_PROXY\"
          echo \"HTTPS_PROXY: \$HTTPS_PROXY\"
          echo \"NO_PROXY: \$NO_PROXY\"
          
          echo \"=== Starting GitHub Actions Runner Download ===\"
          
          # Get latest version
          echo \"Querying latest runner version...\"
          RUNNER_VERSION=\"2.329.0\"  # Default fallback version
          if [ -z \"\$RUNNER_VERSION\" ]; then
            echo \"Fetching latest version from GitHub API...\"
            curl -s --proxy \"\$HTTP_PROXY\" https://api.github.com/repos/actions/runner/releases/latest > api_response.json
            echo \"API response saved to api_response.json\"
            echo \"Checking if jq is available...\"
            which jq || echo \"jq not found, installing...\"
            yum install -y jq
            TAG_NAME=\`jq -r .tag_name api_response.json\`
            echo \"TAG_NAME: \$TAG_NAME\"
            if [ \"\$TAG_NAME\" != \"null\" ] && [ -n \"\$TAG_NAME\" ]; then
              RUNNER_VERSION=\`echo \"\$TAG_NAME\" | sed \"s/^v//\"\`
              echo \"RUNNER_VERSION after processing: \$RUNNER_VERSION\"
            else
              echo \"Failed to get version from API, using default: \$RUNNER_VERSION\"
            fi
          fi
          echo \"Latest version: \$RUNNER_VERSION\"
          
          # Validate version query
          if [ -z \"\$RUNNER_VERSION\" ] || [ \"\$RUNNER_VERSION\" = \"null\" ]; then
            echo \"❌ Failed to get runner version from GitHub API\"
            echo \"API Response content:\"
            cat api_response.json
            echo \"Using fallback version: 2.329.0\"
            RUNNER_VERSION=\"2.329.0\"
          fi
          
          # Clean version string (remove any whitespace or special characters)
          if [ -n \"\$RUNNER_VERSION\" ]; then
            RUNNER_VERSION=\`echo \"\$RUNNER_VERSION\" | tr -d '[:space:]'\`
            echo \"Cleaned version: \$RUNNER_VERSION\"
          else
            echo \"❌ RUNNER_VERSION is empty, cannot clean\"
            exit 1
          fi
          
          if [ \"${{ github.event.inputs.architecture }}\" = \"arm64\" ]; then
            ARCH=arm64
            FILE=actions-runner-linux-arm64-$RUNNER_VERSION.tar.gz
            URL=https://github.com/actions/runner/releases/download/v$RUNNER_VERSION/$FILE
            echo \"Downloading GitHub Actions Runner $RUNNER_VERSION arm64...\"
            echo \"URL: $URL\"
            
            # Download with error handling
            if ! curl -fL --proxy \"\$HTTP_PROXY\" -o \"\$FILE\" \"\$URL\"; then
              echo \"❌ Failed to download runner from \$URL\"
              exit 1
            fi
            
            # Verify download
            if [ ! -f \"\$FILE\" ] || [ ! -s \"\$FILE\" ]; then
              echo \"❌ Downloaded file is missing or empty\"
              exit 1
            fi
            
            du -h \$FILE > file_size.txt
            FILE_SIZE=\`cut -f1 file_size.txt\`
            echo \"✅ Successfully downloaded \$FILE - \$FILE_SIZE\"
            
            # Extract and verify
            echo \"Extracting runner files...\"
            if ! tar xzf \"\$FILE\"; then
              echo \"❌ Failed to extract runner archive\"
              exit 1
            fi
            
            # Verify essential files exist
            if [ ! -f \"config.sh\" ] || [ ! -f \"run.sh\" ]; then
              echo \"❌ Essential runner files missing after extraction\"
              exit 1
            fi
            
            echo \"✅ Runner files extracted successfully\"
            rm -f \"\$FILE\"
            
            # Configure runner
            echo \"=== Configuring GitHub Actions Runner ===\"
            if ! ./config.sh --url https://github.com/dianplus/openresty --token \$GITHUB_TOKEN --name \$INSTANCE_NAME --labels self-hosted,linux,ARM64 --unattended; then
              echo \"❌ Failed to configure runner\"
              exit 1
            fi
            echo \"✅ Runner configured successfully\"
          else
            ARCH=x64
            FILE=actions-runner-linux-x64-$RUNNER_VERSION.tar.gz
            URL=https://github.com/actions/runner/releases/download/v$RUNNER_VERSION/$FILE
            echo \"Downloading GitHub Actions Runner $RUNNER_VERSION x64...\"
            echo \"URL: $URL\"
            
            # Download with error handling
            if ! curl -fL --proxy \"\$HTTP_PROXY\" -o \"\$FILE\" \"\$URL\"; then
              echo \"❌ Failed to download runner from \$URL\"
              exit 1
            fi
            
            # Verify download
            if [ ! -f \"\$FILE\" ] || [ ! -s \"\$FILE\" ]; then
              echo \"❌ Downloaded file is missing or empty\"
              exit 1
            fi
            
            du -h \$FILE > file_size.txt
            FILE_SIZE=\`cut -f1 file_size.txt\`
            echo \"✅ Successfully downloaded \$FILE - \$FILE_SIZE\"
            
            # Extract and verify
            echo \"Extracting runner files...\"
            if ! tar xzf \"\$FILE\"; then
              echo \"❌ Failed to extract runner archive\"
              exit 1
            fi
            
            # Verify essential files exist
            if [ ! -f \"config.sh\" ] || [ ! -f \"run.sh\" ]; then
              echo \"❌ Essential runner files missing after extraction\"
              exit 1
            fi
            
            echo \"✅ Runner files extracted successfully\"
            rm -f \"\$FILE\"
            
            # Configure runner
            echo \"=== Configuring GitHub Actions Runner ===\"
            if ! ./config.sh --url https://github.com/dianplus/openresty --token \$GITHUB_TOKEN --name \$INSTANCE_NAME --labels self-hosted,linux,X64 --unattended; then
              echo \"❌ Failed to configure runner\"
              exit 1
            fi
            echo \"✅ Runner configured successfully\"
          fi
          
          # Start runner
          echo \"=== Starting GitHub Actions Runner ===\"
          nohup ./run.sh > runner.log 2>&1 &
          RUNNER_PID=\$!
          echo \"Runner started with PID: \$RUNNER_PID\"
          
          # Wait a moment and check if runner is still running
          sleep 5
          if ! kill -0 \$RUNNER_PID 2>/dev/null; then
            echo \"❌ Runner process died immediately\"
            echo \"Runner log:\"
            cat runner.log
            exit 1
          fi
          
          echo \"✅ Runner is running successfully\"
          echo \"=== GitHub Actions Runner Setup Complete ===\"

          # Workflow will automatically clean up instances, no need to set scheduled tasks
          EOF

          # Query available instance types and prices
          echo "Querying ${{ github.event.inputs.architecture }} instance types and spot prices..."
          
          # Select instance type pattern based on architecture
          if [ "${{ github.event.inputs.architecture }}" = "arm64" ]; then
            TYPE_PATTERN="^ecs\\.g8y\\.[248]xlarge$|^ecs\\.g8y\\.16xlarge$"
            DEFAULT_TYPE="ecs.g8y.2xlarge"
          else
            TYPE_PATTERN="^ecs\\.c6\\.[248]xlarge$|^ecs\\.c6\\.16xlarge$"
            DEFAULT_TYPE="ecs.c6.2xlarge"
          fi
          
          # Query available resources
          AVAILABLE_TYPES=$(aliyun ecs DescribeAvailableResource \
            --RegionId ${{ env.ALIYUN_REGION }} \
            --DestinationResource InstanceType \
            | jq -r ".AvailableZones.AvailableZone[].AvailableResources.AvailableResource[].SupportedResources.SupportedResource[] | select(.Value | test(\"$TYPE_PATTERN\")) | .Value" | sort -u)
          
          if [ -z "$AVAILABLE_TYPES" ]; then
            echo "No available ${{ github.event.inputs.architecture }} instance types found, using default type"
            AVAILABLE_TYPES=$DEFAULT_TYPE
          fi
          
          echo "Available instance types: $AVAILABLE_TYPES"
          
          # Query spot prices and select lowest price
          BEST_TYPE=""
          BEST_PRICE=999999
          
          for TYPE in $AVAILABLE_TYPES; do
            echo "Querying spot price for instance type $TYPE..."
            
            # Query spot price
            PRICE_INFO=$(aliyun ecs DescribeSpotPriceHistory \
              --RegionId ${{ env.ALIYUN_REGION }} \
              --InstanceType $TYPE \
              --StartTime $(date -u -d '1 hour ago' +%Y-%m-%dT%H:%M:%SZ) \
              --EndTime $(date -u +%Y-%m-%dT%H:%M:%SZ) \
              2>/dev/null)
            
            if [ $? -eq 0 ] && [ -n "$PRICE_INFO" ]; then
              # Get average price
              AVG_PRICE=$(echo $PRICE_INFO | jq -r '.SpotPrices.SpotPriceType[] | .SpotPrice' | awk '{sum+=$1; count++} END {if(count>0) print sum/count; else print "0"}')
              
              if [ "$AVG_PRICE" != "0" ] && [ $(echo "$AVG_PRICE < $BEST_PRICE" | bc -l) -eq 1 ]; then
                BEST_TYPE=$TYPE
                BEST_PRICE=$AVG_PRICE
                echo "Found better instance type: $TYPE, average price: $AVG_PRICE"
              fi
            fi
          done
          
          if [ -z "$BEST_TYPE" ]; then
            echo "Unable to get instance price information, using default instance type"
            BEST_TYPE=$DEFAULT_TYPE
            BEST_PRICE=0.5
          fi
          
          # Calculate maximum price limit (120% of lowest price)
          MAX_PRICE=$(echo "$BEST_PRICE * 1.2" | bc -l)
          echo "Selected instance type: $BEST_TYPE, average price: $BEST_PRICE, maximum price limit: $MAX_PRICE"
          
          # Select availability zone based on architecture and create ECS instance
          if [ "${{ github.event.inputs.architecture }}" = "arm64" ]; then
            ZONES="${{ env.ARM64_ZONES }}"
          else
            ZONES="${{ env.AMD64_ZONES }}"
          fi
          
          INSTANCE_ID=""
          SELECTED_ZONE=""
          
          for ZONE in $(echo $ZONES | tr ',' ' '); do
            echo "Attempting to create ${{ github.event.inputs.architecture }} instance in zone $ZONE..."
            
            RESULT=$(aliyun ecs RunInstances \
              --RegionId ${{ env.ALIYUN_REGION }} \
              --ZoneId $ZONE \
              --ImageId $IMAGE_ID \
              --InstanceType $BEST_TYPE \
              --InstanceName $INSTANCE_NAME \
              --SecurityGroupId ${{ secrets.ALIYUN_SECURITY_GROUP_ID }} \
              --VSwitchId ${{ secrets.ALIYUN_VSWITCH_ID }} \
              --UserData $(base64 -w 0 user_data.sh) \
              --KeyPairName ${{ secrets.ALIYUN_KEY_PAIR_NAME }} \
              --SpotStrategy SpotWithPriceLimit \
              --SpotPriceLimit $MAX_PRICE \
              --SystemDisk.Category cloud_essd \
              --SystemDisk.Size 40 \
              2>/dev/null)
            
            if [ $? -eq 0 ] && [ -n "$RESULT" ]; then
              INSTANCE_ID=$(echo $RESULT | jq -r '.InstanceIdSets.InstanceIdSet[0]')
              if [ "$INSTANCE_ID" != "null" ] && [ -n "$INSTANCE_ID" ]; then
                SELECTED_ZONE=$ZONE
                echo "Successfully created instance in zone $ZONE: $INSTANCE_ID"
                break
              fi
            fi
            
            echo "Failed to create instance in zone $ZONE, trying next zone..."
            sleep 2
          done
          
          if [ -z "$INSTANCE_ID" ] || [ "$INSTANCE_ID" = "null" ]; then
            echo "Unable to create ${{ github.event.inputs.architecture }} instance in any zone, please check configuration"
            exit 1
          fi

          echo "Created instance: $INSTANCE_ID in zone: $SELECTED_ZONE with type: $BEST_TYPE"
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "INSTANCE_NAME=$INSTANCE_NAME" >> $GITHUB_ENV
          echo "SELECTED_ZONE=$SELECTED_ZONE" >> $GITHUB_ENV
          echo "INSTANCE_TYPE=$BEST_TYPE" >> $GITHUB_ENV
          echo "MAX_PRICE=$MAX_PRICE" >> $GITHUB_ENV

      - name: Wait for Runner Registration
        if: github.event.inputs.action == 'create'
        run: |
          echo "Waiting for runner to register..."
          sleep 60

          # Check if runner registered successfully using GitHub API directly
          RUNNER_REGISTERED=false
          for i in {1..3}; do
            echo "⏳ Checking runner status... ($i/3)"
            
            # Use GitHub API directly instead of gh command
            echo "🔍 Querying GitHub API for runner status..."
            API_RESPONSE=$(curl -s --max-time 10 --connect-timeout 5 -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/dianplus/openresty/actions/runners" 2>&1)
            
            # Check if API response is valid
            CURL_EXIT_CODE=$?
            if [ $CURL_EXIT_CODE -ne 0 ] || [ -z "$API_RESPONSE" ]; then
              echo "⚠️ API request failed (exit code: $CURL_EXIT_CODE) or returned empty response"
              RUNNER_STATUS="api_error"
            else
              # Check for permission errors first
              if echo "$API_RESPONSE" | jq -e '.message' > /dev/null 2>&1; then
                ERROR_MESSAGE=$(echo "$API_RESPONSE" | jq -r '.message')
                if [ "$ERROR_MESSAGE" = "Resource not accessible by integration" ]; then
                  echo "❌ GitHub token lacks required permissions for actions/runners API"
                  echo "Required permissions: actions:write, contents:read"
                  RUNNER_STATUS="permission_denied"
                else
                  echo "⚠️ API error: $ERROR_MESSAGE"
                  RUNNER_STATUS="api_error"
                fi
              # Check if response contains runners array
              elif echo "$API_RESPONSE" | jq -e '.runners' > /dev/null 2>&1; then
                RUNNER_STATUS=$(echo "$API_RESPONSE" | jq -r ".runners[] | select(.name==\"${{ env.INSTANCE_NAME }}\") | .status // empty")
                if [ -z "$RUNNER_STATUS" ]; then
                  RUNNER_STATUS="not_found"
                fi
              else
                echo "⚠️ Invalid API response format"
                echo "API Response: $API_RESPONSE"
                RUNNER_STATUS="invalid_response"
              fi
            fi
            
            if [ "$RUNNER_STATUS" = "online" ]; then
              echo "✅ Runner registered successfully!"
              RUNNER_REGISTERED=true
              break
            elif [ "$RUNNER_STATUS" = "offline" ]; then
              echo "⚠️ Runner found but offline: $RUNNER_STATUS"
            elif [ "$RUNNER_STATUS" = "permission_denied" ]; then
              echo "❌ Cannot check runner status due to insufficient permissions"
              echo "Please update workflow permissions or use a token with actions:write access"
              exit 1
            elif [ "$RUNNER_STATUS" = "api_error" ]; then
              echo "⚠️ API request failed, retrying..."
            elif [ "$RUNNER_STATUS" = "invalid_response" ]; then
              echo "⚠️ Invalid API response, retrying..."
            elif [ "$RUNNER_STATUS" = "not_found" ]; then
              echo "⏳ Runner not found yet, retrying..."
            else
              echo "⏳ Unknown status: $RUNNER_STATUS, retrying..."
            fi
            
            sleep 10
          done
          
          # Check if runner registration failed
          if [ "$RUNNER_REGISTERED" = "false" ]; then
            echo "❌ Runner registration failed after 3 attempts"
            echo "Available runners:"
            curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/dianplus/openresty/actions/runners" | \
              jq '.runners[] | {name: .name, status: .status, busy: .busy}'
            exit 1
          fi

      - name: Trigger Build
        if: github.event.inputs.action == 'create'
        run: |
          # Trigger corresponding build workflow based on architecture
          if [ "${{ github.event.inputs.architecture }}" = "arm64" ]; then
            gh workflow run auto-arm64-build.yml \
              --ref develop \
              -f image_tag="${{ env.INSTANCE_NAME }}-$(date +%Y%m%d%H%M%S)" \
              -f push_image=true
          else
            gh workflow run auto-amd64-build.yml \
              --ref develop \
              -f image_tag="${{ env.INSTANCE_NAME }}-$(date +%Y%m%d%H%M%S)" \
              -f push_image=true
          fi

      - name: List Running Instances
        if: github.event.inputs.action == 'list'
        run: |
          aliyun ecs DescribeInstances \
            --RegionId ${{ env.ALIYUN_REGION }} \
            --InstanceName "${{ github.event.inputs.runner_name }}-*" \
            --output table

      - name: Destroy Instance
        if: github.event.inputs.action == 'destroy'
        run: |
          # Find and delete instances
          INSTANCE_IDS=$(aliyun ecs DescribeInstances \
            --RegionId ${{ env.ALIYUN_REGION }} \
            --InstanceName "${{ github.event.inputs.runner_name }}-*" \
            --output json --query 'Instances.Instance[].InstanceId' | jq -r '.[]')

          for INSTANCE_ID in $INSTANCE_IDS; do
            echo "Destroying instance: $INSTANCE_ID"
            aliyun ecs DeleteInstance --InstanceId $INSTANCE_ID --Force true
          done

      - name: Cleanup Summary
        run: |
          echo "## Aliyun Spot Runner Management" >> $GITHUB_STEP_SUMMARY
          echo "- **Action**: ${{ github.event.inputs.action }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ${{ env.ALIYUN_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Instance Type**: ${{ github.event.inputs.instance_type }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event.inputs.action }}" = "create" ]; then
            echo "- **Instance ID**: ${{ env.INSTANCE_ID }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Instance Name**: ${{ env.INSTANCE_NAME }}" >> $GITHUB_STEP_SUMMARY
          fi
